/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.nikhilesh.liferay.algorithm.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import com.nikhilesh.liferay.algorithm.model.TreeNode;
import com.nikhilesh.liferay.algorithm.service.TreeNodeLocalService;
import com.nikhilesh.liferay.algorithm.service.persistence.ALGTreePersistence;
import com.nikhilesh.liferay.algorithm.service.persistence.TreeNodePersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the tree node local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.nikhilesh.liferay.algorithm.service.impl.TreeNodeLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.nikhilesh.liferay.algorithm.service.impl.TreeNodeLocalServiceImpl
 * @see com.nikhilesh.liferay.algorithm.service.TreeNodeLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class TreeNodeLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements TreeNodeLocalService, IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.nikhilesh.liferay.algorithm.service.TreeNodeLocalServiceUtil} to access the tree node local service.
	 */

	/**
	 * Adds the tree node to the database. Also notifies the appropriate model listeners.
	 *
	 * @param treeNode the tree node
	 * @return the tree node that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public TreeNode addTreeNode(TreeNode treeNode) {
		treeNode.setNew(true);

		return treeNodePersistence.update(treeNode);
	}

	/**
	 * Creates a new tree node with the primary key. Does not add the tree node to the database.
	 *
	 * @param treeNodeId the primary key for the new tree node
	 * @return the new tree node
	 */
	@Override
	public TreeNode createTreeNode(long treeNodeId) {
		return treeNodePersistence.create(treeNodeId);
	}

	/**
	 * Deletes the tree node with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param treeNodeId the primary key of the tree node
	 * @return the tree node that was removed
	 * @throws PortalException if a tree node with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public TreeNode deleteTreeNode(long treeNodeId) throws PortalException {
		return treeNodePersistence.remove(treeNodeId);
	}

	/**
	 * Deletes the tree node from the database. Also notifies the appropriate model listeners.
	 *
	 * @param treeNode the tree node
	 * @return the tree node that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public TreeNode deleteTreeNode(TreeNode treeNode) {
		return treeNodePersistence.remove(treeNode);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(TreeNode.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return treeNodePersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.nikhilesh.liferay.algorithm.model.impl.TreeNodeModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return treeNodePersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.nikhilesh.liferay.algorithm.model.impl.TreeNodeModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return treeNodePersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return treeNodePersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return treeNodePersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public TreeNode fetchTreeNode(long treeNodeId) {
		return treeNodePersistence.fetchByPrimaryKey(treeNodeId);
	}

	/**
	 * Returns the tree node matching the UUID and group.
	 *
	 * @param uuid the tree node's UUID
	 * @param groupId the primary key of the group
	 * @return the matching tree node, or <code>null</code> if a matching tree node could not be found
	 */
	@Override
	public TreeNode fetchTreeNodeByUuidAndGroupId(String uuid, long groupId) {
		return treeNodePersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the tree node with the primary key.
	 *
	 * @param treeNodeId the primary key of the tree node
	 * @return the tree node
	 * @throws PortalException if a tree node with the primary key could not be found
	 */
	@Override
	public TreeNode getTreeNode(long treeNodeId) throws PortalException {
		return treeNodePersistence.findByPrimaryKey(treeNodeId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(treeNodeLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(TreeNode.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("treeNodeId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(treeNodeLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(TreeNode.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("treeNodeId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(treeNodeLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(TreeNode.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("treeNodeId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(dynamicQuery,
						"modifiedDate");
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<TreeNode>() {
				@Override
				public void performAction(TreeNode treeNode)
					throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						treeNode);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(TreeNode.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return treeNodeLocalService.deleteTreeNode((TreeNode)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return treeNodePersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the tree nodes matching the UUID and company.
	 *
	 * @param uuid the UUID of the tree nodes
	 * @param companyId the primary key of the company
	 * @return the matching tree nodes, or an empty list if no matches were found
	 */
	@Override
	public List<TreeNode> getTreeNodesByUuidAndCompanyId(String uuid,
		long companyId) {
		return treeNodePersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of tree nodes matching the UUID and company.
	 *
	 * @param uuid the UUID of the tree nodes
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of tree nodes
	 * @param end the upper bound of the range of tree nodes (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching tree nodes, or an empty list if no matches were found
	 */
	@Override
	public List<TreeNode> getTreeNodesByUuidAndCompanyId(String uuid,
		long companyId, int start, int end,
		OrderByComparator<TreeNode> orderByComparator) {
		return treeNodePersistence.findByUuid_C(uuid, companyId, start, end,
			orderByComparator);
	}

	/**
	 * Returns the tree node matching the UUID and group.
	 *
	 * @param uuid the tree node's UUID
	 * @param groupId the primary key of the group
	 * @return the matching tree node
	 * @throws PortalException if a matching tree node could not be found
	 */
	@Override
	public TreeNode getTreeNodeByUuidAndGroupId(String uuid, long groupId)
		throws PortalException {
		return treeNodePersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the tree nodes.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.nikhilesh.liferay.algorithm.model.impl.TreeNodeModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of tree nodes
	 * @param end the upper bound of the range of tree nodes (not inclusive)
	 * @return the range of tree nodes
	 */
	@Override
	public List<TreeNode> getTreeNodes(int start, int end) {
		return treeNodePersistence.findAll(start, end);
	}

	/**
	 * Returns the number of tree nodes.
	 *
	 * @return the number of tree nodes
	 */
	@Override
	public int getTreeNodesCount() {
		return treeNodePersistence.countAll();
	}

	/**
	 * Updates the tree node in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param treeNode the tree node
	 * @return the tree node that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public TreeNode updateTreeNode(TreeNode treeNode) {
		return treeNodePersistence.update(treeNode);
	}

	/**
	 * Returns the alg tree local service.
	 *
	 * @return the alg tree local service
	 */
	public com.nikhilesh.liferay.algorithm.service.ALGTreeLocalService getALGTreeLocalService() {
		return algTreeLocalService;
	}

	/**
	 * Sets the alg tree local service.
	 *
	 * @param algTreeLocalService the alg tree local service
	 */
	public void setALGTreeLocalService(
		com.nikhilesh.liferay.algorithm.service.ALGTreeLocalService algTreeLocalService) {
		this.algTreeLocalService = algTreeLocalService;
	}

	/**
	 * Returns the alg tree persistence.
	 *
	 * @return the alg tree persistence
	 */
	public ALGTreePersistence getALGTreePersistence() {
		return algTreePersistence;
	}

	/**
	 * Sets the alg tree persistence.
	 *
	 * @param algTreePersistence the alg tree persistence
	 */
	public void setALGTreePersistence(ALGTreePersistence algTreePersistence) {
		this.algTreePersistence = algTreePersistence;
	}

	/**
	 * Returns the tree node local service.
	 *
	 * @return the tree node local service
	 */
	public TreeNodeLocalService getTreeNodeLocalService() {
		return treeNodeLocalService;
	}

	/**
	 * Sets the tree node local service.
	 *
	 * @param treeNodeLocalService the tree node local service
	 */
	public void setTreeNodeLocalService(
		TreeNodeLocalService treeNodeLocalService) {
		this.treeNodeLocalService = treeNodeLocalService;
	}

	/**
	 * Returns the tree node persistence.
	 *
	 * @return the tree node persistence
	 */
	public TreeNodePersistence getTreeNodePersistence() {
		return treeNodePersistence;
	}

	/**
	 * Sets the tree node persistence.
	 *
	 * @param treeNodePersistence the tree node persistence
	 */
	public void setTreeNodePersistence(TreeNodePersistence treeNodePersistence) {
		this.treeNodePersistence = treeNodePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.nikhilesh.liferay.algorithm.model.TreeNode",
			treeNodeLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.nikhilesh.liferay.algorithm.model.TreeNode");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return TreeNodeLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return TreeNode.class;
	}

	protected String getModelClassName() {
		return TreeNode.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = treeNodePersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.nikhilesh.liferay.algorithm.service.ALGTreeLocalService.class)
	protected com.nikhilesh.liferay.algorithm.service.ALGTreeLocalService algTreeLocalService;
	@BeanReference(type = ALGTreePersistence.class)
	protected ALGTreePersistence algTreePersistence;
	@BeanReference(type = TreeNodeLocalService.class)
	protected TreeNodeLocalService treeNodeLocalService;
	@BeanReference(type = TreeNodePersistence.class)
	protected TreeNodePersistence treeNodePersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}